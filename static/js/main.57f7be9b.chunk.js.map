{"version":3,"sources":["utils/validationScheme.ts","components/Form/Form.tsx","utils/styles.ts","utils/theme.ts","App.tsx","index.tsx"],"names":["validationSchema","Yup","shape","oldPass","required","newPass","confirmPass","oneOf","Form","useState","isLoading","setLoading","toast","useToast","formik","useFormik","initialValues","onSubmit","setTimeout","resetForm","title","status","duration","isClosable","style","minWidth","handleSubmit","spacing","name","onChange","handleChange","value","values","type","p","borderColor","errors","_hover","_focus","color","variant","disabled","isValid","ButtonStyle","variants","submitBtn","bg","height","width","m","display","alignItems","cursor","outline","transition","whiten","boxShadow","myTheme","extendTheme","components","Button","App","theme","maxW","justifyContent","flexDirection","as","mb","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57f7be9b.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n  oldPass: Yup.string().required(\"Write your old password please\"),\r\n  newPass: Yup.string().required(\"New password is required\"),\r\n  confirmPass: Yup.string()\r\n    .oneOf([Yup.ref(\"newPass\"), null], \"Passwords must match\")\r\n    .required(),\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormHelperText,\r\n  Button,\r\n  useToast,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { validationSchema } from \"../../utils/validationScheme\";\r\n\r\nconst Form: React.FC = () => {\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n  const toast = useToast();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      oldPass: \"\",\r\n      newPass: \"\",\r\n      confirmPass: \"\",\r\n    },\r\n    onSubmit: () => {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n        formik.resetForm();\r\n        toast({\r\n          title: \"Password is changed\",\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      }, 1000);\r\n    },\r\n    validationSchema: validationSchema,\r\n  });\r\n\r\n  return (\r\n    <form style={{ minWidth: \"320px\" }} onSubmit={formik.handleSubmit}>\r\n      <VStack spacing={4}>\r\n        <FormControl>\r\n          <FormLabel>Your old password</FormLabel>\r\n          <Input\r\n            name=\"oldPass\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.oldPass}\r\n            type=\"password\"\r\n            p=\"5px\"\r\n            borderColor={\r\n              formik.errors.oldPass || formik.errors.newPass\r\n                ? \"red.500\"\r\n                : \"gray.100\"\r\n            }\r\n            _hover={{ borderColor: \"gray.700\" }}\r\n            _focus={{ borderColor: \"gray.700\" }}\r\n          />\r\n          {formik.errors.oldPass && (\r\n            <FormHelperText color=\"red.500\">\r\n              {formik.errors.oldPass}\r\n            </FormHelperText>\r\n          )}\r\n        </FormControl>\r\n        <FormControl>\r\n          <FormLabel>New password</FormLabel>\r\n          <Input\r\n            name=\"newPass\"\r\n            value={formik.values.newPass}\r\n            onChange={formik.handleChange}\r\n            type=\"password\"\r\n            p=\"5px\"\r\n            borderColor={\r\n              formik.errors.confirmPass || formik.errors.newPass\r\n                ? \"red.500\"\r\n                : \"gray.100\"\r\n            }\r\n            _hover={{ borderColor: \"gray.700\" }}\r\n            _focus={{ borderColor: \"gray.700\" }}\r\n          />\r\n          {formik.errors.newPass && (\r\n            <FormHelperText color=\"red.500\">\r\n              {formik.errors.newPass}\r\n            </FormHelperText>\r\n          )}\r\n        </FormControl>\r\n        <FormControl>\r\n          <FormLabel>Confirm new password</FormLabel>\r\n          <Input\r\n            name=\"confirmPass\"\r\n            value={formik.values.confirmPass}\r\n            onChange={formik.handleChange}\r\n            type=\"password\"\r\n            p=\"5px\"\r\n            borderColor={formik.errors.confirmPass ? \"red.500\" : \"gray.100\"}\r\n            _hover={{ borderColor: \"gray.700\" }}\r\n            _focus={{ borderColor: \"gray.700\" }}\r\n          />\r\n          {formik.errors.confirmPass && (\r\n            <FormHelperText color=\"red.500\">\r\n              Passwords must match!\r\n            </FormHelperText>\r\n          )}\r\n        </FormControl>\r\n        <Button\r\n          isLoading={isLoading}\r\n          variant=\"submitBtn\"\r\n          type=\"submit\"\r\n          disabled={!formik.isValid}\r\n        >\r\n          Save changes\r\n        </Button>\r\n      </VStack>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { whiten } from \"@chakra-ui/theme-tools\";\r\n\r\nexport const InputStyle = {\r\n  variants: {\r\n    field: {\r\n      defaultInput: {\r\n        outline: \"none\",\r\n        p: \"5px\",\r\n        borderColor: \"gray.100\",\r\n        _hover: { borderColor: \"gray.700\" },\r\n        _focus: { borderColor: \"gray.700\" },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const ButtonStyle = {\r\n  variants: {\r\n    submitBtn: {\r\n      bg: \"green.500\",\r\n      color: \"white\",\r\n      height: \"40px\",\r\n      width: \"150px\",\r\n      m: \"20px auto 0\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      cursor: \"pointer\",\r\n      outline: \"none\",\r\n      transition: \"box-shadow 0.3s ease-in-out, background 0.3s ease\",\r\n      _hover: {\r\n        bg: whiten(\"green.500\", 20),\r\n        boxShadow: \"0px 0px 45px 17px rgba(56, 161, 105, 0.3)\",\r\n      },\r\n      _focus: {\r\n        boxShadow: \"none\",\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\nimport { ButtonStyle as Button } from \"./styles\";\r\n\r\nconst myTheme = extendTheme({\r\n  components: {\r\n    Button,\r\n  },\r\n});\r\n\r\nexport { myTheme };\r\n","import * as React from \"react\";\nimport {\n  ChakraProvider,\n  Container,\n  Flex,\n  Heading,\n  CSSReset,\n} from \"@chakra-ui/react\";\nimport Form from \"./components/Form/Form\";\nimport { myTheme } from \"./utils/theme\";\n\nexport const App = () => (\n  <ChakraProvider theme={myTheme}>\n    <CSSReset />\n    <Container maxW=\"lg\" height=\"100vh\">\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        width=\"100%\"\n        height=\"100%\"\n      >\n        <Heading as=\"h1\" mb=\"50px\">\n          Create your new password\n        </Heading>\n        <Form />\n      </Flex>\n    </Container>\n  </ChakraProvider>\n);\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}